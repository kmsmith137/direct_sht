# This Makefile will be invoked by the python build system (e.g. via 'pip install'),
# but you can also build individual targets by invoking 'make' directly.

# Disable built-in rules and variables (must be first).
MAKEFLAGS += --no-builtin-rules 
MAKEFLAGS += --no-builtin-variables

# Default target 'all' must be first target in Makefile.
# The 'bin' target builds a bunch of binaries in bin/...
# The 'lib' target builds the C++ library lib/libdirect_sht.so, and the python extension direct_sht/direct_sht_pybind11...so.
# The 'build_wheel' and 'build_sdist' targets are invoked by 'pip' (or 'make all').
all: bin lib build_wheel build_sdist

.PHONY: all bin lib build_wheel build_sdist clean


####################################################################################################
#
# Variables encoding configuration: PYTHON, NVCC, NVCC_ARCH, NVCC_DEPFLAGS.
#
# FIXME some day I'll define a configure-script mechanism for setting these variables.
# For now, if you want to change the defaults, just edit the Makfile.

PYTHON ?= python3
NVCC ?= nvcc -std=c++17 -m64 -O3 --compiler-options -Wall,-fPIC

# Extra nvcc flags needed to build Makefile dependencies
#   -MMD create dep file, omitting "system" headers
#   -MP add phony target for each header in dep file (makes error reporting less confusing)
# Note: we don't need "-MT $@", since we use in-tree object filenames (x.cu -> x.o).
# Note: we don't need "-MT $*.d", since we use in-tree depfile names (x.cu -> x.d).
NVCC_DEPFLAGS ?= -MMD -MP

# NVIDIA archictecture.
DEFAULT_NVCC_ARCH = -gencode arch=compute_80,code=sm_80
DEFAULT_NVCC_ARCH += -gencode arch=compute_86,code=sm_86
DEFAULT_NVCC_ARCH += -gencode arch=compute_89,code=sm_89
# DEFAULT_ARCH += -gencode arch=compute_90,code=sm_90
NVCC_ARCH ?= $(DEFAULT_NVCC_ARCH)


####################################################################################################
#
# "Derived" config variables: PYTHON_INCDIR, NUMPY_INCDIR, PYBIND11_INCDIR, PYEXT_SUFFIX, KSGPU_DIR.
#
# These are autogenerated by makefile_helper.py, and cached in makefile_helper.out.
# PYEXT_SUFFIX is something like .cpython-312-x86_64-linux-gnu.so.


ifneq ($(MAKECMDGOALS),clean)
  include makefile_helper.out
endif

makefile_helper.out: makefile_helper.py Makefile
	$(PYTHON) makefile_helper.py


####################################################################################################


# The main output of the build process is these two libraries.
# Reminder: PYEXT_SUFFIX is something like .cpython-312-x86_64-linux-gnu.so.
DIRECT_SHT_LIB := lib/libdirect_sht.so
DIRECT_SHT_PYEXT := direct_sht/direct_sht_pybind11$(PYEXT_SUFFIX)

# These get compiled into lib/libdirect_sht.so.
LIB_SRCFILES = \
  src_lib/gpu_kernel.cu \
  src_lib/reference_sht.cu

# These get compiled into direct_sht/direct_sht_pybind11....so.
PYEXT_SRCFILES = \
  src_pybind11/direct_sht_pybind11.cu

# Must list all python source files here.
# (Otherwise they won't show up in 'pip install' or pypi.)
PYFILES = \
  direct_sht/__init__.py \
  direct_sht/__main__.py \
  direct_sht/direct_sht_core.py \
  direct_sht/tests.py \
  direct_sht/timing.py

# These are in 1-1 corresponding with executables in bin/
# For example, 'src_bin/test-sht.cu' gets compiled to 'bin/test-sht'.
BIN_SRCFILES = \
  src_bin/test-sht.cu \
  src_bin/time-sht.cu

# Must list all header files here.
# (Otherwise they won't show up in 'pip install' or pypi.)
HFILES = \
  include/direct_sht.hpp

# 'make clean' deletes {*~, *.o, *.d, *.so, *.pyc} from these dirs.
CLEAN_DIRS := . lib src_bin src_lib direct_sht/__pycache__ include

# Extra files to be deleted by 'make clean'.
# Note that 'direct_sht/include' and 'direct_sht/lib' are symlinks, so we put them in CLEAN_FILES, not CLEAN_RMDIRS
CLEAN_FILES := sdist_files.txt wheel_files.txt makefile_helper.out direct_sht/include direct_sht/lib

# Directories that should be empty at the end of 'make clean', and can be deleted.
CLEAN_RMDIRS := bin lib direct_sht/__pycache__


####################################################################################################


LIB_OFILES := $(LIB_SRCFILES:%.cu=%.o)
PYEXT_OFILES := $(PYEXT_SRCFILES:%.cu=%.o)
BIN_XFILES := $(BIN_SRCFILES:src_bin/%.cu=bin/%)

# Must include all .d files, or build will break!
ALL_SRCFILES := $(LIB_SRCFILES) $(PYEXT_SRCFILES) $(BIN_SRCFILES)
DEPFILES := $(ALL_SRCFILES:%.cu=%.d)

SDIST_FILES := pyproject.toml Makefile makefile_helper.py
SDIST_FILES += $(ALL_SRCFILES) $(HFILES)

# Some symlinks for the wheel:
#  - header file include/%.hpp gets symlinked to direct_sht/include/%.hpp
#  - library lib/libdirect_sht.so gets symlinked to direct_sht/lib/libdirect_sht.so
#  - python extension direct_sht/direct_sht_pybind11...so does not need to be symlinked/renamed.
WHEEL_FILES := $(PYFILES) $(DIRECT_SHT_PYEXT) direct_sht/$(DIRECT_SHT_LIB)
WHEEL_FILES += $(HFILES:%=direct_sht/%)

# Phony targets. The special targets 'build_wheel' and 'build_sdist' are needed by pip/pipmake.
lib: $(DIRECT_SHT_LIB) $(DIRECT_SHT_PYEXT)
bin: $(BIN_XFILES)
build_wheel: wheel_files.txt $(DIRECT_SHT_LIB) $(DIRECT_SHT_PYEXT)
build_sdist: sdist_files.txt

# Symlink {include,lib} into python directory 'direct_sht'.
direct_sht/include:
	ln -s ../include $@
direct_sht/lib:
	ln -s ../lib $@

# Build object files in src_lib/, src_bin/, and src_lib/template_instantiations/ with default flags.
%.o: %.cu %.d
	$(NVCC) $(NVCC_ARCH) $(NVCC_DEPFLAGS) -I$(KSGPU_DIR)/include -c -o $@ $<

# Build object files in src_pybind11/ with special flags.
src_pybind11/%.o: src_pybind11/%.cu src_pybind11/%.d
	$(NVCC) $(NVCC_ARCH) $(NVCC_DEPFLAGS) -I$(KSGPU_DIR)/include -I$(PYTHON_INCDIR) -I$(NUMPY_INCDIR) -I$(PYBIND11_INCDIR) -c -o $@ $<

# Build the C++ library (lib/libdirect_sht.so)
# We want it to automatically pull in the C++ library $(KSGPU_DIR)/lib/libkspgu.so.
#
# The python extension has been built correctly if 'objdump -x' shows the following:
#   NEEDED   libksgpu.so
#   RUNPATH  $(KSGPU_DIR)/lib    # where Makefile var $(KSGPU_DIR) is read from makefile_helper.out
#
# The quoting can be understood by working backwards as follows:
#  - g++ command line should look like:   g++ -Wl,-rpath="$(KSGPU_DIR)/lib"
#  - nvcc command line should look like:  nvcc -Xcompiler '"-Wl,-rpath=$(KSGPU_DIR)/lib"'

$(DIRECT_SHT_LIB): $(LIB_OFILES)
	@mkdir -p lib
	$(NVCC) $(NVCC_ARCH) -shared -o $@ $^ -lksgpu -lyaml-cpp -L$(KSGPU_DIR)/lib -Xcompiler '"-Wl,-rpath=$(KSGPU_DIR)/lib"'

# Build C++ binaries (bin/*)
# Link flags are similar to previous rule -- see comments above.
bin/%: src_bin/%.o $(DIRECT_SHT_LIB)
	@mkdir -p bin/
	$(NVCC) $(NVCC_ARCH) -o $@ $^ -lksgpu -lyaml-cpp -L$(KSGPU_DIR)/lib -Xcompiler '"-Wl,-rpath=$(KSGPU_DIR)/lib"'

# Build the python extension (direct_sht/direct_sht_pybind11...so)
# We want it to automatically pull in the C++ library direct_sht/lib/libdirect_sht.so.
#
# The python extension has been built correctly if 'objdump -x' shows the following:
#   NEEDED   libdirect_sht.so
#   RUNPATH  $ORIGIN/lib
#
# The quoting can be understood by working backwards as follows:
#  - g++ command line should look like:   g++ -Wl,-rpath="\$ORIGIN/lib"
#  - nvcc command line should look like:  nvcc -Xcompiler '"-Wl,-rpath=\\$ORIGIN/lib"'
#  - Makefile line should look like:      nvcc -Xcompiler '"-Wl,-rpath=\\$$ORIGIN/lib"'
#
# Note that we don't link to libksgpu.so or ksgpu_pybind11...so in this step.
# These libraries end up getting imported as follows:
#
#  1. When 'direct_sht' is imported, we do 'import ksgpu' (in direct_sht/__init__.py)
#     before 'import direct_sht_pybind11'.
#
#  2. When 'ksgpu' is imported, we use the "ctypes trick" (see comment in ksgpu/__init__.py)
#     to load the libraries libksgpu.so and ksgpu_pybind11...so with globally visible symbols.

$(DIRECT_SHT_PYEXT): $(PYEXT_OFILES) $(DIRECT_SHT_LIB) direct_sht/lib
	$(NVCC) $(NVCC_ARCH) -shared -o $@ $(PYEXT_OFILES) -ldirect_sht -Ldirect_sht/lib -Xcompiler '"-Wl,-rpath=\\$$ORIGIN/lib"'

# Needed by pip/pipmake: list of all files that go into the (non-editable) wheel.
wheel_files.txt: Makefile direct_sht/include direct_sht/lib
	rm -f $@
	for f in $(WHEEL_FILES); do echo $$f; done >>$@

# Needed by pip/pipmake: list of all files that go into the sdist.
sdist_files.txt: Makefile
	rm -f $@
	for f in $(SDIST_FILES); do echo $$f; done >>$@

clean:
	@for f in $(foreach d,$(CLEAN_DIRS),$(wildcard $d/*~ $d/*.o $d/*.d $d/*.so $d/*.pyc)); do echo rm $$f; rm $$f; done
	@for f in $(wildcard $(CLEAN_FILES) $(BIN_XFILES)); do echo rm $$f; rm $$f; done
	@for d in $(wildcard $(CLEAN_RMDIRS)); do echo rmdir $$d; rmdir $$d; done

# Specifying .SECONDARY with no prerequisites disables auto-deletion of intermediate files.
.SECONDARY:

# If a depfile is absent, build can still proceed.
$(DEPFILES):

# Include any depfiles which are present.
include $(wildcard $(DEPFILES))
